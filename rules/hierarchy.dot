digraph aith {
    rankdir="BT"
    concentrate=true;

    unification -> top
    syntactic -> unification
    propositional -> unification
    subgraph cluster_kind{
        bgcolor=lightgray; peripheries=0
        kindBool[label="kind<propositional>"]
        kind[label="kind<syntatic>"]
    } -> top
    region -> kindBool
    io -> region
    multiplicity -> kindBool
    size -> kind
    byte [label="8bit"]
    byte -> size
    short [label="16bit"]
    short -> size
    int [label="32bit"]
    int -> size
    long [label="64bit"]
    long -> size
    signedness -> kind
    signed -> signedness
    unsigned -> signedness
    boxed -> kind
    pointer[label="σ*"]
    pointer -> boxed
    array[label="σ[]"]
    array -> boxed
    representation -> kind
    pointerRep[label="pointer"]
    pointerRep -> representation
    structRep[label="struct (κ, κ', ...)"]
    structRep -> representation
    wordRep[label="κ word"]    
    wordRep -> representation
    subgraph cluster_pretype {
        bgcolor=lightgray; peripheries=0
        pretype[label="pretype<κ, κ'>"]
        pretypePtrU[label="pretype<pointer,true>"]
        pretypePtrL[label="pretype<pointer,false>"]
        pretypeWord[label="pretype<κ word, true>"]
        pretypeStruct[label="pretype<struct(...), κ>"]
    } -> kind
    boolean[label="bool"]
    boolean -> pretypeWord
    number[label="σ integer(τ)"]
    number -> pretypeWord
    functionPointer[label="function*(σ) => τ uses π"]
    functionPointer -> pretypePtrU
    shared[label="σ @ π"]
    shared -> pretypePtrU
    unique[label="unique σ"]
    unique -> pretypePtrL
    tuple[label="(σ, τ, ...)"]
    tuple -> pretypeStruct
    type -> kind
    inline[label="σ -π τ"]
    inline -> type
    inlineAbstraction[label="\\x -> e"]
    inlineAbstraction -> inline
    poly[label="<...> σ"]
    poly -> type
    polyIntroduction[label="<...> e"]
    polyIntroduction -> poly
    subgraph cluster_effect {
        bgcolor=lightgray; peripheries=0
        effectBoolean[label="bool in π"]
        effectNumber[label="σ integer(τ) in π"]
        effectTuple[label="(σ, τ, ...) in π"]
        effectFunction[label="function*(σ) => τ uses ρ in π"]
        effect[label="σ in π"]
    } -> type
    true -> effectBoolean
    relate[label="e < e'"]
    relate -> effectBoolean
    num[label="n"]
    num -> effectNumber
    arith[label="e + e'"]
    arith -> effectNumber
    tupleIntro[label="(e,e', ...)"]
    tupleIntro -> effectTuple
    extern[label="extern \"sym\""]
    extern -> effectFunction
    let[label="let x = e; e'"]
    let -> effect
    app[label="e (e')"]
    app -> effect
    read[label="*e"]
    read -> effect
    if[label="if e {e'} else {e''}"]
    if -> effect
}
