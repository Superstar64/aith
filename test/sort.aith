#{
 Copyright (C) 2020 Freddy Angel Cubas "Superstar64"
 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file BSL.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
#}

~ <a extends unrestricted> (& (& raw a*,raw a* &), world &) -> (& (&&), world &) ~
template swap = (left,right) { do =>
	tmp = try => *left;
	run left <- try { *right } ;
	run right <- tmp;
	()
}.uncurry;


~ (& (& raw integer32[], integer32, natural, natural &), world &) -> (& (&&), world &) ~
symbol quick sort exchange = (array, pivot, middle, end) { do =>
	last = try { array[end] };
	if (end < array.length - 1){
		if (pivot > last){
			middle pointer = array&[middle];
			end pointer = array&[end];
			run curry(swap`)(middle pointer, end pointer);
			run curry(quick sort exchange`)(array, pivot, middle + 1, end + 1);
			()
		} else {
			run curry(quick sort exchange`)(array, pivot, middle, end + 1);
			()
		}
	} else {
		middle pointer = array&[middle];
		end pointer = array&[array.length - 1]; 
		run curry(swap`)(middle pointer,end pointer);
		run curry(quick sort`)(array[0..middle]);
		run curry(quick sort`)(array[middle..array.length]);
		()
	}
}.uncurry;

~ (& raw integer32[], world &) -> (& (&&), world &) ~
symbol quick sort = array { do =>
	if (array.length > 1) {
		pivot = try { array[array.length - 1] };
		run curry(quick sort exchange`)(array, pivot, 0, 0);
		()
	} else {
		()
	}
}.uncurry;

~ world -> (& (&&), world &) ~
symbol main = do {
	array = try { [0,7,9,3,8,6,5,1,4,2] } : raw integer32[];
	run curry(quick sort`)(array);
	target = try => [0,1,2,3,4,5,6,7,8,9];
	run assert(array == target);
	()
};

