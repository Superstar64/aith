increment(p :: unique int*) :: unique int* {
    let (x,p) = borrow {p} {
        <A : region> \(p :* int* @ A in false) -> {
            *p = (*p + 1)
        }
    };
    p
}

ignore(p :: unique int*) :: unique int* {
    let (x,p) = borrow {p} {
        <A : region> \(p :* int* @ A in false) -> {
            ()
        }
    };
    p
}


inline borrow<
    A:region,
    B:region,
    C:region,
    M:boxed,
    J:*representation,
    K:multiplicity,
    N:type<J, K>
> = \(x : unique M in A)
 -> \(f : <D:region> M @ D in false -* N in C | B & D) 
 -> {
    let x = cast x : M @ false in A;
    let e = (f) @_ {x};
    (e, cast x : unique M in false)
};
