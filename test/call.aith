module:
inline call = ~``\r : _impact => ``\e : _existance => ``\ a : _representation {
	`\r : _type _runtime r e => `\a : _type _runtime _data _real a {
		\f : #a -> r => \x : a {
			#f(x)
		}
	}
};

function _ :: `\/a : _type _runtime _data _real _pointer => a -> a;
function idImpl = `\a : _type _runtime _data _real _pointer => \(x : a){
	x
};

inline _ :: ~ `\/a : _type _runtime _data _real _pointer => a -> a;
inline id = ~ `\a : _type _runtime _data _real _pointer => call``(_data) ``(_real _pointer)``(_pointer)`(a)`(a)(idImpl`(a)); 

function _ :: `\/a : _type _runtime _data _real _pointer => a -> a;
function useId = `\a : _type _runtime _data _real _pointer => \(x : a){
	~id`(a)(x)
};
