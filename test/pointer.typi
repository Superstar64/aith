#/Copyright (C) 2018  Freddy Angel Cubas "Superstar64"
 Boost License
/#

alias void = tuple();

alias increment = > {
	*$@ = *$@ + 1;
};

alias newPointer = > {
	let pointer :: integer 32(*) = new 5;
	assert(*pointer == 5);
	increment(pointer);
	assert(*pointer == 6);
	
	assert(pointer == pointer);
};

alias localPointer = > {
	let number :: integer 32 = 4;
	assert(number == 4);
	increment(&number);
	assert(number == 5);
	increment(&number);
	assert(number == 6);
	assert(&number == &number); 
};

alias arrayPointer = > {
	let array :: integer 32[*] = [0,10,20];
	let index = &array[1];
	assert(array[1] == 10);
	increment(index);
	assert(array[1] == 11);
	assert(&array[1] == &array[1]);
	assert(&array[1] != &array[2]);
};


alias tuplePointer = > {
	let pair = ((infer integer 32)(4),(infer integer 32)(10));
	assert(pair@ 0 2 == 4);
	increment(&pair @ 0 2);
	assert(pair@ 0 2 == 5);
	
	assert(pair@ 1 2 == 10);
	increment(&pair @ 1 2);
	assert(pair@ 1 2 == 11);
	
	
	assert(&pair@0 2 == &pair@ 0 2);
	assert(&pair@0 2 != &pair@ 1 2);
	assert(&pair == &pair);
};


alias main :: void -> void = > {
	newPointer();
	localPointer();
	arrayPointer();
	#address of tuples don't work yet
	#tuplePointer();
};

alias assert :: boolean -> void = extern "assert";
