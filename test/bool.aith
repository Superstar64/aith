module:

type bool = ~``\/ s : _stage => `\/ a : _type s => !a -> !a -> a;

inline _ :: bool;
inline true = ~``\s : _stage => `\a : _type s => \!(x : a) => \!(y : a) => x;

inline _ :: bool;
inline false = ~``\s : _stage => `\a : _type s => \!(x : a) => \!(y : a) => y;

inline _ :: ~bool -> bool;
inline not = ~\x : bool {
	x``(_meta)`(bool)(!false)(!true)
};

inline _ :: ~bool -> `\/a : _type _runtime _pointer => (_copy a) =>? #( (a,a) _function a); 
inline boolToFunction = ~\x : bool {
	`\b : _type _runtime _pointer => _when _copy b {
		#\(left : b, right : b){
			~x``(_runtime _pointer)`(b)(!left)(!right)
		}
	}
};

function _ :: `\/a : _type _runtime _pointer => (_copy a) =>? (a,a) -> a;
function runtimeTrue = ~boolToFunction(true);

function _ :: `\/a : _type _runtime _pointer => (_copy a) =>? (a,a) -> a;
function runtimeNotTrue = ~boolToFunction(not(true));
