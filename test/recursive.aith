module:

type fix = `\r : _representation => \f : _type _runtime _data _real r -> _type _runtime _data _real r {
	_recursive x : _type _runtime _data _real r => f(x)
};

inline makeFix = ~``\ r: _representation => `\ f : _type _runtime _data _real r -> _type _runtime _data _real r => \x : f(fix `(r) f) {
	# _pack ( a : _type _runtime _data _real r { f(a) } ) x
};

inline breakFix = ~``\ r: _representation => `\ f: _type _runtime _data _real r -> _type _runtime _data _real r => \x : fix `(r) f {
	# _unpack x
};

type endo = `\r : _representation => \a : _type _runtime _data _real r => a -> a;


function selfApp = \(x : fix `(_pointer) (endo `(_pointer)) ){
	(~ breakFix ``(_pointer) `(endo `(_pointer)) x) (x)
};

